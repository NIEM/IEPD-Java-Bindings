package org.gtri.jaxb

/**
 * Given a map of uri => prefix mappings, this class knows how to generate the contents of package-info.java with the
 * appropriate data to make namespaces come out "pretty" instead of ns1, ns2, etc.
 */
class JaxbPackageInfoGenerator {

    String fileContents = null;
    private Map mappings;

    public JaxbPackageInfoGenerator(Map nsPrefixMappings){
        this.mappings = nsPrefixMappings;
        updateFileContents();
    }

    public void setMappings(Map mappings){
        this.mappings = mappings;
        updateFileContents();
    }

    public String getFileContents(){
        if( fileContents == null )
            throw new UnsupportedOperationException("package-info.java File Contents is empty!");
        return fileContents;
    }

    void updateFileContents(){
        fileContents = null;
        StringWriter writer = new StringWriter();
        writer.println("""

/**
 * This file was auto-generated by the GTRI JAXB Project, ${Calendar.getInstance().getTime().toString()}
 */

@javax.xml.bind.annotation.XmlSchema(
    namespace = "${getDefaultNamespace()}", elementFormDefault = javax.xml.bind.annotation.XmlNsForm.QUALIFIED,
    xmlns = {
${generateXmlNsData()}
    }
)
package @@PACKAGE@@;

import javax.xml.bind.annotation.*;

""")
        fileContents = writer.toString();
    }

    String generateXmlNsData(){
        StringWriter writer = new StringWriter();
        for( String uri : mappings.keySet() ?: []){
            String prefix = mappings.get(uri);
            writer.append("        @XmlNs(prefix = \"${prefix}\", namespaceURI = \"${uri}\"), ")
        }
        return writer.toString();
    }

    String getDefaultNamespace(){
        return mappings.keySet().first();
    }

}/* end JaxbPackageInfoGenerator */